---
title: Building & Predicting Ensemble Species Distribution Models
---

## Overview
The first step in the CVA2.0 workflow is to build the species distribution models. These will be the basis of the exposure, directionality, and possibly additional indicators from the CVA. These are what allow the calculations to be spatially explicit and account for species habitat use. 

Within this workflow, there are three steps: 

1. Data preparation 
2. Building & Predicting Species Distribution Models
3. Building the Ensemble
4. Predicting the Ensemble

The functions outlined below are designed to be run either sequentially or in parallel with the R parallelization method of your choice (doParallel and furrr are recommended) and can be run in loops across a list of species. Below we describe the recommended directory set up and formats for any supporting tables. 

## Data Preparation 
### Fisheries Data 
The function `standardize_data` can be used to standardize provided csv files or pull NEFSC survey or observer data from NEFSC databases via ROracle. This can also be accomplished in R outside of the package, but `standardize_data` provides a single function to format data in a way that will be accepted by downstream functions. If you are pulling together data from a variety of sources, you will likely still need to manipulate data outside of this function to make sure that data are in a single csv file and that dates and times are in the correct format. 

To pull NEFSC survey or observer data, a channel from the package `dbutils` must be provided: 
```{r}
#| eval: false
surv <- standardize_data(dataType = 'Surveys', channel = dbutils::connect_to_database(server="NEFSC_pw_oraprod",uid="KGALLAGHER"))
```

To standardize CSV data, a file path to the csv file, as well as column names for  station IDs; position (longitude/latitude); date; the column corresponding to the presence/absence, or count of the species; and species name. 
```{r}
#| eval: false
neamap <- standardize_data(dataType = 'CSV', csv = "./Data/csvs/raw/NEAMAP_Tow_Catch_2025-08-14.csv", csvCols = c('station', 'lon', 'lat', 'date', 'present_absent', 'SCI_NAME'))
```

This function results in a dataframe being transformed from this: 
```{r}
#| echo: false
exRaw <- read.csv('GOP_092025.csv')
head(exRaw)
```
To this: 
```{r}
#| echo: false
exSt <- read.csv('GOP.csv')
head(exSt)
```
To ensure that fisheries and environmental data are on the same scale, and to convert any abundance data to presence/absence, the fisheries csvs produced by `standardize_data` are then converted into rasters of effort/presence/absence with the function `create_rast`. While the source datasets are generated for the entire dataset, one rasterStack is produced for each target species and data source. 'create_rast' produces rasters with the same resolution as the environmental data where values range from 0 to 2, where 0 means that no effort was present in the grid cell, 1 means that there was fishing effort but the target species was not caught, and 2 indicates that the target species was caught in that grid cell.

Users must provide the standardized csv files generated by `standardize_data`, a link to a netcdf file that the desired grid and timesteps can be extracted from, the start date of the timeseries, and a vector of alternate names for the target species to account for any differences in species names across data sources. The user must also indicate if the data come from fisheries independent (surveys) or dependent sources (observer or logbook programs). If data come from fisheries dependent sources, then a threshold is applied before the raster is created, following McHenry et al 2019; rasters are only created if the species is present at least 30 times throughout the dataset.  

```{r}
#| eval: false
rast <- create_rast(data = csv, isObs = FALSE, grid = "http://psl.noaa.gov/thredds/dodsC/Projects/CEFI/regional_mom6/cefi_portal/northwest_atlantic/full_domain/hindcast/monthly/regrid/r20250715/tob.nwa.full.hcast.monthly.regrid.r20250715.199301-202312.nc", origin = '1993-01-01', targetVec = "Atlantic cod ,ATLANTIC COD ,Gadus morhua,Cod Atlantic,GADUS MORHUA") #example to make raster for Atlantic Cod
```

The wrapper function `saveRast` is provided for `create_rast`. This wrapper function provides logging functionality to keep track of progress, which is especially helpful if running the code in parallel, and also adds a skip functionality to skip making the raster if it already exists for that species and data source. It also saves the resulting rasterStack in the `input_rasters` directory within the species-specific folder in the working directory. 

Here is an example of using `saveRast` in parallel using the package `furrr` with `future_pmap`: 
```{r}
#| eval: false
plan(multisession, workers = 5)
future_pmap(list(..1 = argsList$csvName, ..2 = argsList$spp, ..3 = altNames, ..4 = argsList$skip, ..5 = argsList$isObs), ~ saveRast(csvName = ..1, spp = ..2, sppNames = ..3, skip = ..4, isObs = ..5, grid = "http://psl.noaa.gov/thredds/dodsC/Projects/CEFI/regional_mom6/cefi_portal/northwest_atlantic/full_domain/hindcast/monthly/regrid/r20230520/tob.nwa.full.hcast.monthly.regrid.r20230520.199301-201912.nc", origin = '1993-01-01'), .progress = T)
plan(sequential)
```
Where `argsList` is a dataframe with a row for each desired call of `saveRast`, and a column associated with most arguments for `saveRast` and `create_rast`. This is generated using `tidyr::expand_grid` to create a dataframe of every combination of target species and data sources. 

`create_rast` creates a seperate rasterStack for each species, which is saved to the species-specific `input_rasters` folder bv the `saveRast` wrapper function. This allows the user to examine the raster for each data source independently to ensure that it meets expectations. Before these can be matched with the environmental data, the rasters must be combined into a single rasterStack, while maintaining the 0-2 range to document presences, absences, and lack of effort. This is done with the `merge_rasts` and associated `combineSave` wrapper function. The `combineSave` wrapper function, in addition to providing logging and skip functionality, also automatically creates a list of raster objects in the `input_rasters` folder for the `merge_rasts` function. 

```{r}
#| eval: false
combinedRasts <- merge_rasts(rasts)
#where rasts is a list of rasterStacks to combine
```

### Environmental Data

### Creating Data Frames 

## Building Species Distribution Models 

## Building Ensemble 

## Predicting the Ensemble with Forecasts
